{"version":3,"sources":["../source/getNumberType.js"],"names":["getNumberType","normalizeArguments","arguments","input","options","metadata","args","Array","prototype","slice","call","arg_1","arg_2","arg_3","arg_4","defaultCountry","undefined","is_object","TypeError","_"],"mappings":";;;;;;;;;;kBAKwBA,a;QAORC,kB,GAAAA,kB;;AAZhB;;;;AACA;;;;AACA;;;;;;AAEA;AACe,SAASD,aAAT,GACf;AAAA,2BACsCC,mBAAmBC,SAAnB,CADtC;AAAA,KACSC,KADT,uBACSA,KADT;AAAA,KACgBC,OADhB,uBACgBA,OADhB;AAAA,KACyBC,QADzB,uBACyBA,QADzB;;AAEC,QAAO,8BAAeF,KAAf,EAAsBC,OAAtB,EAA+BC,QAA/B,CAAP;AACA;;AAED;AACO,SAASJ,kBAAT,CAA4BK,IAA5B,EACP;AAAA,6BACsCC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,CADtC;AAAA;AAAA,KACQK,KADR;AAAA,KACeC,KADf;AAAA,KACsBC,KADtB;AAAA,KAC6BC,KAD7B;;AAGC,KAAIX,cAAJ;AACA,KAAIC,UAAU,EAAd;AACA,KAAIC,iBAAJ;;AAEA;AACA;AACA,KAAI,OAAOM,KAAP,KAAiB,QAArB,EACA;AACC;AACA;AACA;AACA,MAAI,QAAOC,KAAP,yCAAOA,KAAP,OAAiB,QAArB,EACA;AACC,OAAIE,KAAJ,EACA;AACCV,cAAUS,KAAV;AACAR,eAAWS,KAAX;AACA,IAJD,MAMA;AACCT,eAAWQ,KAAX;AACA;;AAED;AACA;AACA;AACA;AACA;AACA,OAAI,mCAAoBF,KAApB,CAAJ,EACA;AACCR,YAAQ,sBAAMQ,KAAN,EAAa,EAAEI,gBAAgBH,KAAlB,EAAb,EAAwCP,QAAxC,CAAR;AACA,IAHD,MAKA;AACCF,YAAQ,EAAR;AACA;AACD;AACD;AACA;AACA;AA5BA,OA8BA;AACC,QAAIU,KAAJ,EACA;AACCT,eAAUQ,KAAV;AACAP,gBAAWQ,KAAX;AACA,KAJD,MAMA;AACCR,gBAAWO,KAAX;AACA;;AAED;AACA;AACA;AACA;AACA;AACA,QAAI,mCAAoBD,KAApB,CAAJ,EACA;AACCR,aAAQ,sBAAMQ,KAAN,EAAaK,SAAb,EAAwBX,QAAxB,CAAR;AACA,KAHD,MAKA;AACCF,aAAQ,EAAR;AACA;AACD;AACD;AACD;AACA;AA9DA,MA+DK,IAAIc,UAAUN,KAAV,CAAJ,EACL;AACCR,WAAQQ,KAAR;;AAEA,OAAIE,KAAJ,EACA;AACCT,cAAUQ,KAAV;AACAP,eAAWQ,KAAX;AACA,IAJD,MAMA;AACCR,eAAWO,KAAX;AACA;AACD,GAbI,MAcA,MAAM,IAAIM,SAAJ,CAAc,oFAAd,CAAN;;AAEL,QAAO;AACNf,cADM;AAENC,kBAFM;AAGNC;AAHM,EAAP;AAKA;;AAED;AACA;AACA;AACA,IAAMY,YAAY,SAAZA,SAAY;AAAA,QAAK,QAAOE,CAAP,yCAAOA,CAAP,OAAa,QAAlB;AAAA,CAAlB","file":"getNumberType.js","sourcesContent":["import isViablePhoneNumber from './isViablePhoneNumber'\nimport _getNumberType from './getNumberType_'\nimport parse from './parse_'\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType()\n{\n\tconst { input, options, metadata } = normalizeArguments(arguments)\n\treturn _getNumberType(input, options, metadata)\n}\n\n// Sort out arguments\nexport function normalizeArguments(args)\n{\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\n\n\tlet input\n\tlet options = {}\n\tlet metadata\n\n\t// If the phone number is passed as a string.\n\t// `getNumberType('88005553535', ...)`.\n\tif (typeof arg_1 === 'string')\n\t{\n\t\t// If \"default country\" argument is being passed\n\t\t// then convert it to an `options` object.\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\n\t\tif (typeof arg_2 !== 'object')\n\t\t{\n\t\t\tif (arg_4)\n\t\t\t{\n\t\t\t\toptions = arg_3\n\t\t\t\tmetadata = arg_4\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmetadata = arg_3\n\t\t\t}\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\n\t\t\tif (isViablePhoneNumber(arg_1))\n\t\t\t{\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata)\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinput = {}\n\t\t\t}\n\t\t}\n\t\t// No \"resrict country\" argument is being passed.\n\t\t// International phone number is passed.\n\t\t// `getNumberType('+78005553535', metadata)`.\n\t\telse\n\t\t{\n\t\t\tif (arg_3)\n\t\t\t{\n\t\t\t\toptions = arg_2\n\t\t\t\tmetadata = arg_3\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmetadata = arg_2\n\t\t\t}\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\n\t\t\tif (isViablePhoneNumber(arg_1))\n\t\t\t{\n\t\t\t\tinput = parse(arg_1, undefined, metadata)\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinput = {}\n\t\t\t}\n\t\t}\n\t}\n\t// If the phone number is passed as a parsed phone number.\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\n\telse if (is_object(arg_1))\n\t{\n\t\tinput = arg_1\n\n\t\tif (arg_3)\n\t\t{\n\t\t\toptions = arg_2\n\t\t\tmetadata = arg_3\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmetadata = arg_2\n\t\t}\n\t}\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\n\n\treturn {\n\t\tinput,\n\t\toptions,\n\t\tmetadata\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nconst is_object = _ => typeof _ === 'object'"]}