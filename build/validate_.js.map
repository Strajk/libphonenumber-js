{"version":3,"sources":["../source/validate_.js"],"names":["isValidNumber","input","options","metadata","Metadata","country","hasCountry","Error","hasTypes","undefined","national_number","v2","nationalNumber","phone","nationalNumberPattern"],"mappings":";;;;;kBAiCwBA,a;;AAjCxB;;;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6Be,SAASA,aAAT,CAAuBC,KAAvB,EACf;AAAA,MAD6CC,OAC7C,uEADuD,EACvD;AAAA,MAD2DC,QAC3D;;AACCA,aAAW,IAAIC,kBAAJ,CAAaD,QAAb,CAAX;;AAEA;AACA;AACA,MAAI,CAACF,MAAMI,OAAX,EACA;AACC,WAAO,KAAP;AACA;;AAED,MAAI,CAACF,SAASG,UAAT,CAAoBL,MAAMI,OAA1B,CAAL,EACA;AACC,UAAM,IAAIE,KAAJ,uBAA8BN,MAAMI,OAApC,CAAN;AACA;;AAEDF,WAASE,OAAT,CAAiBJ,MAAMI,OAAvB;;AAEA;AACA;AACA,MAAIF,SAASK,QAAT,EAAJ,EACA;AACC,WAAO,8BAAcP,KAAd,EAAqBC,OAArB,EAA8BC,SAASA,QAAvC,MAAqDM,SAA5D;AACA;;AAED;AACA;AACA,MAAMC,kBAAkBR,QAAQS,EAAR,GAAaV,MAAMW,cAAnB,GAAoCX,MAAMY,KAAlE;AACA,SAAO,2BAAgBH,eAAhB,EAAiCP,SAASW,qBAAT,EAAjC,CAAP;AACA","file":"validate_.js","sourcesContent":["import Metadata from './metadata'\nimport { matchesEntirely } from './util'\nimport getNumberType from './getNumberType_'\n\n/**\n * Checks if a given phone number is valid.\n *\n * If the `number` is a string, it will be parsed to an object,\n * but only if it contains only valid phone number characters (including punctuation).\n * If the `number` is an object, it is used as is.\n *\n * The optional `defaultCountry` argument is the default country.\n * I.e. it does not restrict to just that country,\n * e.g. in those cases where several countries share\n * the same phone numbering rules (NANPA, Britain, etc).\n * For example, even though the number `07624 369230`\n * belongs to the Isle of Man (\"IM\" country code)\n * calling `isValidNumber('07624369230', 'GB', metadata)`\n * still returns `true` because the country is not restricted to `GB`,\n * it's just that `GB` is the default one for the phone numbering rules.\n * For restricting the country see `isValidNumberForRegion()`\n * though restricting a country might not be a good idea.\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n *\n * Examples:\n *\n * ```js\n * isValidNumber('+78005553535', metadata)\n * isValidNumber('8005553535', 'RU', metadata)\n * isValidNumber('88005553535', 'RU', metadata)\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\n * ```\n */\nexport default function isValidNumber(input, options = {}, metadata)\n{\n\tmetadata = new Metadata(metadata)\n\n\t// This is just to support `isValidNumber({})`\n\t// for cases when `parseNumber()` returns `{}`.\n\tif (!input.country)\n\t{\n\t\treturn false\n\t}\n\n\tif (!metadata.hasCountry(input.country))\n\t{\n\t\tthrow new Error(`Unknown country: ${input.country}`)\n\t}\n\n\tmetadata.country(input.country)\n\n\t// By default, countries only have type regexps when it's required for\n\t// distinguishing different countries having the same `countryCallingCode`.\n\tif (metadata.hasTypes())\n\t{\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\n\t}\n\n\t// If there are no type regexps for this country in metadata then use\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\n}"]}