{"version":3,"sources":["../../source/findNumbers/utf-8.js"],"names":["isLatinLetter","isInvalidPunctuationSymbol","_pZ","pZ","PZ","_pN","_pNd","pNd","_pL","pL","pL_regexp","RegExp","_pSc","pSc","pSc_regexp","letter","test","character"],"mappings":";;;;;QA8CgBA,a,GAAAA,a;QAWAC,0B,GAAAA,0B;AAzDhB;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;AAiBA,IAAMC,MAAM,IAAZ;AACO,IAAMC,wBAASD,GAAT,MAAN;AACA,IAAME,yBAAUF,GAAV,MAAN;;AAEA,IAAMG,oBAAM,IAAZ;AACP;;AAEA,IAAMC,OAAO,KAAb;AACO,IAAMC,0BAAUD,IAAV,MAAN;;AAEA,IAAME,oBAAM,QAAZ;AACP,IAAMC,WAASD,GAAT,MAAN;AACA,IAAME,YAAY,IAAIC,MAAJ,CAAWF,EAAX,CAAlB;;AAEA,IAAMG,OAAO,EAAb;AACA,IAAMC,YAAUD,IAAV,MAAN;AACA,IAAME,aAAa,IAAIH,MAAJ,CAAWE,GAAX,CAAnB;;AAGA;;;;;AAKO,SAASb,aAAT,CAAuBe,MAAvB,EACP;AACC;AACA,MAAI,CAACL,UAAUM,IAAV,CAAeD,MAAf,CAAL,EAA6B;AAC5B,WAAO,KAAP;AACA;;AAED;AACA,SAAO,IAAP;AACA;;AAEM,SAASd,0BAAT,CAAoCgB,SAApC,EACP;AACC,SAAOA,cAAc,GAAd,IAAqBH,WAAWE,IAAX,CAAgBC,SAAhB,CAA5B;AACA","file":"utf-8.js","sourcesContent":["// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\n * http://www.regular-expressions.info/unicode.html\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\n * \"\\p{Mn}\" is \"non-spacing mark\".\n *\n * Javascript doesn't support Unicode Regular Expressions\n * so substituting it with this explicit set of characters.\n *\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\n */\n\nconst _pZ = '\\s'\nexport const pZ = `[${_pZ}]`\nexport const PZ = `[^${_pZ}]`\n\nexport const _pN = '\\d'\n// const pN = `[${_pN}]`\n\nconst _pNd = '0-9'\nexport const pNd = `[${_pNd}]`\n\nexport const _pL = 'a-zA-Z'\nconst pL = `[${_pL}]`\nconst pL_regexp = new RegExp(pL)\n\nconst _pSc = ''\nconst pSc = `[${_pSc}]`\nconst pSc_regexp = new RegExp(pSc)\n\n\n/**\n * Helper method to determine if a character is a Latin-script letter or not.\n * For our purposes, combining marks should also return true since we assume\n * they have been added to a preceding Latin character.\n */\nexport function isLatinLetter(letter)\n{\n\t// Combining marks are a subset of non-spacing-mark.\n\tif (!pL_regexp.test(letter)) {\n\t\treturn false\n\t}\n\n\t// ¯\\_(ツ)_/¯\n\treturn true\n}\n\nexport function isInvalidPunctuationSymbol(character)\n{\n\treturn character === '%' || pSc_regexp.test(character)\n}\n"]}