{"version":3,"sources":["../source/isPossibleNumber.js"],"names":["normalizeArguments","_isPossibleNumber","isPossibleNumber","arguments","input","options","metadata"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA;;;;;;;;;;;;;;AAcA,eAAe,SAASC,gBAAT,GACf;AAAA,4BACsCF,mBAAmBG,SAAnB,CADtC;AAAA,MACSC,KADT,uBACSA,KADT;AAAA,MACgBC,OADhB,uBACgBA,OADhB;AAAA,MACyBC,QADzB,uBACyBA,QADzB;;AAEC,SAAOL,kBAAkBG,KAAlB,EAAyBC,OAAzB,EAAkCC,QAAlC,CAAP;AACA","file":"isPossibleNumber.js","sourcesContent":["import { normalizeArguments } from './getNumberType'\nimport _isPossibleNumber from './isPossibleNumber_'\n\n/**\n * Checks if a given phone number is possible.\n * Which means it only checks phone number length\n * and doesn't test any regular expressions.\n *\n * Examples:\n *\n * ```js\n * isPossibleNumber('+78005553535', metadata)\n * isPossibleNumber('8005553535', 'RU', metadata)\n * isPossibleNumber('88005553535', 'RU', metadata)\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\n * ```\n */\nexport default function isPossibleNumber()\n{\n\tconst { input, options, metadata } = normalizeArguments(arguments)\n\treturn _isPossibleNumber(input, options, metadata)\n}"]}