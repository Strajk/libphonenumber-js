{"version":3,"sources":["../source/constants.js"],"names":["MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS"],"mappings":"AAAA;AACA,OAAO,IAAMA,qBAAqB,CAA3B;;AAEP;AACA;AACA,OAAO,IAAMC,qBAAqB,EAA3B;;AAEP;AACA,OAAO,IAAMC,0BAA0B,CAAhC;;AAEP;AACA;AACA,OAAO,IAAMC,eAAe,4CAArB;;AAEP;AACA,IAAMC,SAAS,kCAAf;AACA,IAAMC,UAAU,SAAhB;AACA,IAAMC,OAAO,SAAb;AACA,OAAO,IAAMC,aAAa,6BAAnB;AACP,IAAMC,WAAW,kCAAjB;AACA;AACA,IAAMC,SAAS,qBAAf;;AAEA;AACA;AACA;AACA;AACA,OAAO,IAAMC,yBAAuBN,MAAvB,GAAgCC,OAAhC,GAA0CC,IAA1C,GAAiDC,UAAjD,GAA8DC,QAA9D,GAAyEC,MAA/E;;AAEP,OAAO,IAAME,aAAa,SAAnB;AACP","file":"constants.js","sourcesContent":["// The minimum length of the national significant number.\nexport const MIN_LENGTH_FOR_NSN = 2\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport const MAX_LENGTH_FOR_NSN = 17\n\n// The maximum length of the country calling code.\nexport const MAX_LENGTH_COUNTRY_CODE = 3\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\nconst SLASHES = '\\uFF0F/'\nconst DOTS = '\\uFF0E.'\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\n\nexport const PLUS_CHARS = '+\\uFF0B'\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')"]}